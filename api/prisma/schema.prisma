generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  user_name  String    @unique
  password   String
  is_admin   Boolean   @default(false)
  status     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  accounts   Account[]

  @@map("users")
}

model Account {
  id            Int            @id @default(autoincrement())
  account_email String         @unique
  user_id       Int
  status        Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  user          User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Subscription  Subscription[]

  @@map("accounts")
}

model Categories_service {
  id         Int       @id @default(autoincrement())
  name       String
  status     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  services   Service[]

  @@map("categories_services")
}

model Service {
  id                     Int                @id @default(autoincrement())
  name                   String
  categories_services_id Int
  status                 Boolean            @default(true)
  created_at             DateTime           @default(now())
  updated_at             DateTime           @updatedAt
  categories_services    Categories_service @relation(fields: [categories_services_id], references: [id], onDelete: Cascade)
  subcription            Subscription[]

  @@map("services")
}

model Subscription {
  id                     Int                  @id @default(autoincrement())
  user_name_subscription String?
  services_id            Int
  account_id             Int
  status                 Boolean              @default(true)
  created_at             DateTime             @default(now())
  updated_at             DateTime             @updatedAt
  accounts               Account              @relation(fields: [account_id], references: [id], onDelete: Cascade)
  services               Service              @relation(fields: [services_id], references: [id], onDelete: Cascade)
  Subscription_detail    Subscription_detail?

  @@map("subscriptions")
}

model Subscription_detail {
  id                Int                @id @default(autoincrement())
  subcription_id    Int                @unique
  password          String?
  secret_question   String?
  connect_google    Boolean            @default(false)
  connect_github    Boolean            @default(false)
  connect_microsoft Boolean            @default(false)
  other_connect     String?
  status            Boolean            @default(true)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  Recovery_methods  Recovery_methods[]
  subcription       Subscription       @relation(fields: [subcription_id], references: [id], onDelete: Cascade)

  @@map("subscriptions_details")
}

model Recovery_methods {
  id                     Int                 @id @default(autoincrement())
  subscription_detail_id Int
  method_type            Method_type
  method_value           String?
  status                 Boolean             @default(true)
  created_at             DateTime            @default(now())
  updated_at             DateTime            @updatedAt
  subcription_detail     Subscription_detail @relation(fields: [subscription_detail_id], references: [id], onDelete: Cascade)

  @@map("recovery_methods")
}

enum Method_type {
  password_recovery
  email_recovery
  token_recovery
  phone_recovery
}
