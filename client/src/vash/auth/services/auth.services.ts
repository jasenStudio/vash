// Generated by https://quicktype.io

import { AxiosError } from "axios";
import { vashApi } from "@/api/vashApi";
import { AuthResponse } from "@/infrastructure/interfaces/auth.responses";
import { User } from "../../../domain/entities/user";
import { useAuthStore } from "@/vash/store/auth/useAuthStore";
import { ErrorMapper } from "@/infrastructure/mapper/error.mapper";

export class AuthService {
  static login = async (user_name: string, password: string) => {
    try {
      const { data } = await vashApi.post<AuthResponse>("/auth/sign-in", {
        user_name,
        password,
      });
      if (data.expiration!.length > 0) {
        localStorage.setItem("auth-token-expiration", data.expiration!);
      }
      return data;
    } catch (error) {
      //TODO REfactor error response

      const response_error = ErrorMapper.handleError(
        error,
        "Ops , you can't logIn"
      );

      throw response_error;
      // console.log(error);
      // if (error instanceof AxiosError) {
      //   if (error.code === "ERR_NETWORK") {
      //     throw new Error(`503 Service Unavailable - ${error.code} `);
      //   }
      //   console.log("Aqui");
      //   throw new Error(JSON.stringify((error as any).response?.data));
      // }
      // throw new Error(JSON.stringify((error as any).response?.data));
    }
  };

  static checkStatusAuth = async () => {
    try {
      const { data } = await vashApi.get<AuthResponse>("/auth/renew");

      if (data.expiration!.length > 0) {
        localStorage.setItem("auth-token-expiration", data.expiration!);
      }
      return data;
    } catch (error) {
      //* TODO HAbilitar salida por token invalido
      // const logout = useAuthStore.getState().logout;

      if (error instanceof AxiosError) {
        console.log(error.response?.data);

        if (error.response!.data.message.include("Token invalido")) {
          useAuthStore.getState().logout;
        }

        throw new Error(error.response?.data.message);
      }
      throw new Error("UnAuthorizard");
    }
  };

  static registerUser = async (payload: User) => {
    try {
      const { data } = await vashApi.post<AuthResponse>("/auth/sign-up", {
        ...payload,
      });
      return data;
    } catch (error) {
      console.log(error);
      const response_error = ErrorMapper.handleError(
        error,
        "Ops , you can't register User"
      );
      console.log(response_error);
      throw response_error;
      // if (error instanceof AxiosError) {
      //   console.log(error.response?.data);
      //   throw new Error(error.response?.data.message);
      // }
      // // console.log(error);
      // throw new Error("Unable to register");
    }
  };
}
